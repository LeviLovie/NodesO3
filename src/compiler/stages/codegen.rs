use anyhow::{anyhow, bail, Result};

use super::{
    super::{IOMap, NodeMap},
    Deps, ExecTraversal,
};
use crate::graph::Node;

const SYS_MODULE: &str = include_str!("../../python/sys.py");

pub struct CodeGen {
    debug_info: bool,
    node_map: NodeMap,
    io_map: IOMap,
    exec: ExecTraversal,
    deps: Deps,
    output: String,
}

impl CodeGen {
    pub fn new(
        debug_info: bool,
        node_map: NodeMap,
        io_map: IOMap,
        exec: ExecTraversal,
        deps: Deps,
    ) -> Self {
        Self {
            debug_info,
            node_map,
            io_map,
            exec,
            deps,
            output: String::new(),
        }
    }

    pub fn generate(mut self) -> Result<String> {
        self.header();

        for node_id in self.exec.execution_order() {
            let node = self
                .node_map
                .get(node_id)
                .ok_or_else(|| anyhow!("Node {} not found in NodeMap", node_id))?;

            let code = self.emit_node(node)?;
            self.output.push_str(&code);
        }

        Ok(self.output)
    }

    fn header(&mut self) {
        self.output.push_str(&format!(
            "# Generated by NodesOâ‚ƒ v{} (https://github.com/LeviLovie/NodesO3)\n\n",
            env!("CARGO_PKG_VERSION")
        ));
        self.output.push_str(SYS_MODULE);
        self.output.push('\n');
    }

    fn emit_node(&self, node: &Node) -> Result<String> {
        println!("Emitting node {}#{}", node.desc.title, node.id);
        let mut result = String::new();

        if self.debug_info {
            result.push_str(&format!("# Node {}#{}\n", node.desc.title, node.id));
        }

        let impl_desc = node
            .impl_for_lang("python3")
            .ok_or_else(|| anyhow!("No Python3 implementation for node {}", node.id))?;

        let mut code = format!(
            "{}{}",
            impl_desc.type_check.clone().unwrap_or_default(),
            impl_desc.code
        );

        replace(&mut code, "{title}", &node.desc.title);
        replace(&mut code, "{id}", &node.id.to_string());

        // Inputs
        for (i, input) in node.desc.inputs.iter().enumerate() {
            if let Some(&(from_node, from_port)) = self.io_map.get((node.id, i)) {
                // connected input
                replace(
                    &mut code,
                    &format!("{{i_{}}}", input.name),
                    &format!("output_{}_{}", from_node, from_port),
                );
            } else if let Some(default) = &input.default {
                // fallback to default value
                replace(
                    &mut code,
                    &format!("{{i_{}}}", input.name),
                    &default.to_string(),
                );
            } else {
                bail!(
                    "Input {} of node {} is not connected and has no default",
                    input.name,
                    node.id
                );
            }
        }

        // Fields
        for field in &node.desc.fields {
            replace(
                &mut code,
                &format!("{{f_{}}}", field.name),
                &field.value.to_string(),
            );
        }

        // Outputs
        for (i, output) in node.desc.outputs.iter().enumerate() {
            replace(
                &mut code,
                &format!("{{o_{}}}", output.name),
                &format!("output_{}_{}", node.id, i),
            );
        }

        result.push_str(&code);
        result.push('\n');
        if self.debug_info {
            result.push('\n');
        }

        Ok(result)
    }
}

fn replace(s: &mut String, from: &str, to: &str) {
    *s = s.replace(from, to);
}
