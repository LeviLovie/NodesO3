use anyhow::{bail, Context, Result};

use crate::compiler::{IOMap, NodeMap, UpstreamTraversal};

pub fn write(
    debug_info: bool,
    node_map: NodeMap,
    io_map: IOMap,
    traversal: UpstreamTraversal,
) -> Result<String> {
    let exec_order = traversal.execution_order();
    let mut output = String::new();
    output.push_str(&format!(
        "# Generated by NodesOâ‚ƒ v{} (https://github.com/LeviLovie/NodesO3)\n\n",
        env!("CARGO_PKG_VERSION")
    ));

    for node_id in exec_order {
        if let Some(node) = node_map.get(*node_id) {
            let node_output = write_node(debug_info, node, &io_map)
                .context(format!("Failed to write node {}", node.id))?;
            output.push_str(&node_output)
        } else {
            bail!("Node ID {} not found in NodeMap", node_id);
        }
    }

    Ok(output)
}

fn write_node(debug_info: bool, node: &crate::graph::Node, io_map: &IOMap) -> Result<String> {
    let mut output = String::new();
    if debug_info {
        output.push_str(&format!("# Node {}#{}\n", node.desc.title, node.id));
    }

    let mut py_impl = node.desc.py_impl.trim().trim_end_matches("\n").to_string();
    for field in &node.desc.fields {
        replace(
            &mut py_impl,
            format!("{{f_{}}}", field.name),
            field.value.to_string(),
        );
    }
    for (i, input) in node.desc.inputs.iter().enumerate() {
        if let Some(&(from_node, from_port)) = io_map.get((node.id, i)) {
            replace(
                &mut py_impl,
                format!("{{i_{}}}", input.name),
                format!("output_{}_{}", from_node, from_port),
            );
            continue;
        } else {
            bail!("Input {} of node {} is not connected", input.name, node.id);
        }
    }
    for (i, output) in node.desc.outputs.iter().enumerate() {
        replace(
            &mut py_impl,
            format!("{{o_{}}}", output.name),
            format!("output_{}_{}", node.id, i),
        );
    }
    output.push_str(&py_impl);
    output.push_str("\n");
    if debug_info {
        output.push_str("\n");
    }

    Ok(output)
}

fn replace(s: &mut String, from: String, to: String) {
    *s = s.replace(&from, &to);
}
